#!/bin/bash

# ===================================
# KITVERSITY DEPLOYMENT SCRIPT
# ===================================

set -e

echo "🚀 Starting Kitversity deployment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if .env.production exists
if [ ! -f ".env.production" ]; then
    print_error ".env.production file not found!"
    exit 1
fi

print_status "Loading environment variables..."
source .env.production

# Validate required environment variables
required_vars=("DB_ROOT_PASSWORD" "DB_PASSWORD" "JWT_SECRET" "ADMIN_PASSWORD" "REDIS_PASSWORD" "GRAFANA_PASSWORD" "ACME_EMAIL")

for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        print_error "Required environment variable $var is not set!"
        exit 1
    fi
done

print_success "Environment variables validated!"

# Stop existing containers
print_status "Stopping existing containers..."
docker-compose -f docker-compose.prod.yml down || true

# Remove old images (optional)
print_status "Cleaning up old images..."
docker image prune -f || true

# Build and start services
print_status "Building and starting services..."
docker-compose -f docker-compose.prod.yml up -d --build

# Wait for services to be healthy
print_status "Waiting for services to be ready..."
sleep 30

# Check service health
print_status "Checking service health..."

# Check database
if docker-compose -f docker-compose.prod.yml exec -T kitversity-db mysqladmin ping -h localhost -u root -p${DB_ROOT_PASSWORD} --silent; then
    print_success "Database is healthy!"
else
    print_error "Database health check failed!"
    exit 1
fi

# Check Redis
if docker-compose -f docker-compose.prod.yml exec -T kitversity-redis redis-cli -a ${REDIS_PASSWORD} ping | grep -q PONG; then
    print_success "Redis is healthy!"
else
    print_error "Redis health check failed!"
    exit 1
fi

# Check application
if curl -f -s http://localhost:3000/api/health > /dev/null; then
    print_success "Application is healthy!"
else
    print_warning "Application health check failed, but continuing..."
fi

# Initialize database if needed
print_status "Initializing database..."
docker-compose -f docker-compose.prod.yml exec -T kitversity-db mysql -u root -p${DB_ROOT_PASSWORD} ${DB_DATABASE} -e "SELECT COUNT(*) FROM users;" > /dev/null 2>&1 || {
    print_status "Running database initialization..."
    docker-compose -f docker-compose.prod.yml exec -T kitversity-db mysql -u root -p${DB_ROOT_PASSWORD} ${DB_DATABASE} < database/init.sql
}

print_success "Database initialized!"

# Show deployment status
print_status "Deployment completed! Services status:"
docker-compose -f docker-compose.prod.yml ps

echo ""
print_success "🎉 Kitversity has been deployed successfully!"
echo ""
print_status "Access your application at:"
echo "  🌐 Main site: https://kitversity.com"
echo "  📊 Grafana: https://grafana.kitversity.com (admin/${GRAFANA_PASSWORD})"
echo "  🔍 Traefik: https://traefik.kitversity.com"
echo "  📈 Prometheus: https://prometheus.kitversity.com"
echo ""
print_status "Admin login:"
echo "  📧 Email: ${ADMIN_EMAIL}"
echo "  🔑 Password: ${ADMIN_PASSWORD}"
echo ""
print_warning "Important reminders:"
echo "  1. Make sure your domain DNS points to this server (31.97.67.197)"
echo "  2. SSL certificates will be automatically generated by Let's Encrypt"
echo "  3. Monitor logs with: docker-compose -f docker-compose.prod.yml logs -f"
echo "  4. Backup database regularly with: ./scripts/backup.sh"
echo ""
print_success "Deployment completed successfully! 🚀"